{
  "version": 3,
  "sources": ["../../@vgrid/simpleheat/simpleheat.js", "../../@vgrid/react-leaflet-heatmap-layer/esm/Heatmap.js", "../../@vgrid/react-leaflet-heatmap-layer/esm/HeatmapLayer.js"],
  "sourcesContent": ["'use strict';\n\nif (typeof module !== 'undefined') module.exports = simpleheat;\n\nfunction simpleheat(canvas) {\n    if (!(this instanceof simpleheat)) return new simpleheat(canvas);\n\n    this._canvas = canvas = typeof canvas === 'string' ? document.getElementById(canvas) : canvas;\n\n    this._ctx = canvas.getContext('2d', { willReadFrequently: true });\n    this._width = canvas.width;\n    this._height = canvas.height;\n\n    this._max = 1;\n    this._data = [];\n}\n\nsimpleheat.prototype = {\n\n    defaultRadius: 25,\n\n    defaultGradient: {\n        0.4: 'blue',\n        0.6: 'cyan',\n        0.7: 'lime',\n        0.8: 'yellow',\n        1.0: 'red'\n    },\n\n    data: function (data) {\n        this._data = data;\n        return this;\n    },\n\n    max: function (max) {\n        this._max = max;\n        return this;\n    },\n\n    add: function (point) {\n        this._data.push(point);\n        return this;\n    },\n\n    clear: function () {\n        this._data = [];\n        return this;\n    },\n\n    radius: function (r, blur) {\n        blur = blur === undefined ? 15 : blur;\n\n        // create a grayscale blurred circle image that we'll use for drawing points\n        var circle = this._circle = this._createCanvas(),\n            ctx = circle.getContext('2d', { willReadFrequently: true }),\n            r2 = this._r = r + blur;\n\n        circle.width = circle.height = r2 * 2;\n\n        ctx.shadowOffsetX = ctx.shadowOffsetY = r2 * 2;\n        ctx.shadowBlur = blur;\n        ctx.shadowColor = 'black';\n\n        ctx.beginPath();\n        ctx.arc(-r2, -r2, r, 0, Math.PI * 2, true);\n        ctx.closePath();\n        ctx.fill();\n\n        return this;\n    },\n\n    resize: function () {\n        this._width = this._canvas.width;\n        this._height = this._canvas.height;\n    },\n\n    gradient: function (grad) {\n        // create a 256x1 gradient that we'll use to turn a grayscale heatmap into a colored one\n        var canvas = this._createCanvas(),\n            ctx = canvas.getContext('2d', { willReadFrequently: true }),\n            gradient = ctx.createLinearGradient(0, 0, 0, 256);\n\n        canvas.width = 1;\n        canvas.height = 256;\n\n        for (var i in grad) {\n            gradient.addColorStop(+i, grad[i]);\n        }\n\n        ctx.fillStyle = gradient;\n        ctx.fillRect(0, 0, 1, 256);\n\n        this._grad = ctx.getImageData(0, 0, 1, 256).data;\n\n        return this;\n    },\n\n    draw: function (minOpacity) {\n        if (!this._circle) this.radius(this.defaultRadius);\n        if (!this._grad) this.gradient(this.defaultGradient);\n\n        var ctx = this._ctx;\n\n        ctx.clearRect(0, 0, this._width, this._height);\n\n        // draw a grayscale heatmap by putting a blurred circle at each data point\n        for (var i = 0, len = this._data.length, p; i < len; i++) {\n            p = this._data[i];\n            ctx.globalAlpha = Math.min(Math.max(p[2] / this._max, minOpacity === undefined ? 0.05 : minOpacity), 1);\n            ctx.drawImage(this._circle, p[0] - this._r, p[1] - this._r);\n        }\n\n        // colorize the heatmap, using opacity value of each pixel to get the right color from our gradient\n        var colored = ctx.getImageData(0, 0, this._width, this._height);\n        this._colorize(colored.data, this._grad);\n        ctx.putImageData(colored, 0, 0);\n\n        return this;\n    },\n\n    _colorize: function (pixels, gradient) {\n        for (var i = 0, len = pixels.length, j; i < len; i += 4) {\n            j = pixels[i + 3] * 4; // get gradient color from opacity value\n\n            if (j) {\n                pixels[i] = gradient[j];\n                pixels[i + 1] = gradient[j + 1];\n                pixels[i + 2] = gradient[j + 2];\n            }\n        }\n    },\n\n    _createCanvas: function () {\n        if (typeof document !== 'undefined') {\n            return document.createElement('canvas');\n        } else {\n            // create a new canvas instance in node.js\n            // the canvas class needs to have a default constructor without any parameter\n            return new this._canvas.constructor();\n        }\n    }\n};\n", "import * as L from 'leaflet';\n/// <reference path=\"simpleheat.d.ts\"/>\nimport SimpleHeat, { Gradient } from '@vgrid/simpleheat';\nexport { SimpleHeat, Gradient };\nconst max = arr => arr.reduce((_max, value) => Math.max(_max, value), Number.MIN_SAFE_INTEGER);\nconst min = arr => arr.reduce((_min, value) => Math.min(_min, value), Number.MAX_SAFE_INTEGER);\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\nfunction isInvalid(num) {\n  return !isNumber(num) && !num;\n}\nfunction isValid(num) {\n  return !isInvalid(num);\n}\nfunction isValidLatLngArray(arr) {\n  return arr.filter(isValid).length === arr.length;\n}\nfunction isInvalidLatLngArray(arr) {\n  return !isValidLatLngArray(arr);\n}\nfunction shouldIgnoreLocation(loc) {\n  return isInvalid(loc.lng) || isInvalid(loc.lat);\n}\nexport function computeAggregate(agg, intensity, aggregateType) {\n  if (aggregateType === void 0) {\n    aggregateType = 'sum';\n  }\n  const updateMeanAndSigma = (c, v) => {\n    const newMean = agg.data.mean + fns.mean(agg.data.mean, c, v);\n    agg.data.sigma += (v - newMean) * (v - agg.data.mean);\n    agg.data.mean = newMean;\n  };\n  const fns = {\n    mean: (m, c, v) => (v - m) / c,\n    count: () => 1,\n    sum: (m, c, v) => v,\n    distinct: (m, c, v) => {\n      agg.same.add(v);\n      return agg.same.size;\n    },\n    min: (m, c, v) => Math.min(m, v),\n    max: (m, c, v) => Math.max(m, v),\n    variance: (m, c, v) => {\n      updateMeanAndSigma(c, v);\n      return c > 1 ? agg.data.sigma / (c - 1) : 0;\n    },\n    variancep: (m, c, v) => {\n      updateMeanAndSigma(c, v);\n      return c > 1 ? agg.data.sigma / c : 0;\n    },\n    stdev: (m, c, v) => Math.sqrt(fns.variance(m, c, v)),\n    stdevp: (m, c, v) => Math.sqrt(fns.variancep(m, c, v))\n  };\n  const type = aggregateType.toLowerCase();\n  if (!agg.data[type]) {\n    if (type === 'min') {\n      agg.data[type] = Number.MAX_SAFE_INTEGER;\n    } else if (type === 'max') {\n      agg.data[type] = Number.MIN_SAFE_INTEGER;\n    } else if (['stdev', 'stdevp', 'variance', 'variancep'].includes(type)) {\n      if (!agg.data.mean) {\n        agg.data.mean = 0;\n      }\n      if (!agg.data.sigma) {\n        agg.data.sigma = 0;\n      }\n      agg.data[type] = 0;\n    } else {\n      agg.data[type] = 0;\n    }\n  }\n  const res = (fns[type] || fns.sum)(agg.data[type], agg.seen, intensity);\n  if (['mean', 'count', 'sum'].includes(type)) {\n    agg.data[type] += res;\n  } else {\n    agg.data[type] = res;\n  }\n  return agg.data[type];\n}\nexport default class Heatmap extends L.Layer {\n  constructor(options) {\n    super(options);\n    this.options = L.Util.setOptions(this, options);\n  }\n  get _heatmap() {\n    if (!this.__heatmap) {\n      this.__el = document.createElement('canvas');\n      this.__heatmap = new SimpleHeat(this.__el);\n    }\n    return this.__heatmap;\n  }\n  get _el() {\n    if (!this.__el) {\n      this.__el = document.createElement('canvas');\n      this.__heatmap = new SimpleHeat(this.__el);\n    }\n    return this.__el;\n  }\n  getPane() {\n    return super.getPane() ?? this._map.getPanes().overlayPane;\n  }\n  onAdd(map) {\n    const canAnimate = map.options.zoomAnimation && L.Browser.any3d;\n    const zoomClass = `leaflet-zoom-${canAnimate ? 'animated' : 'hide'}`;\n    const mapSize = map.getSize();\n    this._el.className = zoomClass;\n    this._el.style.transformOrigin = '50% 50%';\n    this._el.width = mapSize.x;\n    this._el.height = mapSize.y;\n    this._heatmap.resize();\n    this.getPane().appendChild(this._el);\n    this.reset();\n    if (this.options.fitBoundsOnLoad) {\n      this.fitBounds();\n    }\n    this.updateSimpleHeat(this.getSimpleHeatOptions());\n    return this;\n  }\n  onRemove() {\n    const pane = this.getPane();\n    if (pane.contains(this._el)) {\n      pane.removeChild(this._el);\n    }\n    return this;\n  }\n  getEvents() {\n    return {\n      viewreset: this.reset,\n      moveend: this.reset,\n      zoomanim: this._animateZoom\n    };\n  }\n  _animateZoom(e) {\n    const _e = e;\n    const scale = this._map.getZoomScale(_e.zoom);\n    const offset = this._map.latLngToLayerPoint(_e.center).subtract(this._map.containerPointToLayerPoint(this._map.getSize().divideBy(2))).multiplyBy(-scale).subtract(this._map.layerPointToContainerPoint([0, 0]));\n    L.DomUtil.setTransform(this._el, offset, scale);\n  }\n  fitBounds() {\n    const {\n      points,\n      longitudeExtractor,\n      latitudeExtractor\n    } = this.options;\n    const lngs = points.map(longitudeExtractor);\n    const lats = points.map(latitudeExtractor);\n    const ne = {\n      lng: max(lngs),\n      lat: max(lats)\n    };\n    const sw = {\n      lng: min(lngs),\n      lat: min(lats)\n    };\n    if (shouldIgnoreLocation(ne) || shouldIgnoreLocation(sw)) {\n      return;\n    }\n    this._map.fitBounds(L.latLngBounds(L.latLng(sw), L.latLng(ne)));\n  }\n  resize() {\n    if (!this._map) {\n      return;\n    }\n    const size = this._map.getSize();\n    if (size.x !== this._el.width || size.y !== this._el.height) {\n      this._el.width = size.x;\n      this._el.height = size.y;\n      this._heatmap.resize();\n    }\n  }\n  getMinOpacity() {\n    return this.options.minOpacity ?? 0.01;\n  }\n  getOpacity() {\n    return this.options.opacity ?? 1;\n  }\n  getMax() {\n    return this.options.max ?? 3.0;\n  }\n  getRadius() {\n    return this.options.radius ?? 30;\n  }\n  getMaxZoom() {\n    return this.options.maxZoom ?? 18;\n  }\n  getBlur() {\n    return this.options.blur ?? 15;\n  }\n  getSimpleHeatOptions() {\n    return {\n      opacity: this.getOpacity(),\n      minOpacity: this.getMinOpacity(),\n      maxZoom: this.getMaxZoom(),\n      radius: this.getRadius(),\n      blur: this.getBlur(),\n      max: this.getMax(),\n      gradient: this.options.gradient\n    };\n  }\n\n  /**\n   * Update various heatmap properties like radius, gradient, and max\n   */\n  updateSimpleHeat(options) {\n    this.updateHeatmapRadius(options.radius, options.blur);\n    this.updateHeatmapGradient(options.gradient);\n    this.updateHeatmapMax(options.max);\n  }\n\n  /**\n   * Update the heatmap's radius and blur (blur is optional)\n   */\n  updateHeatmapRadius(radius, blur) {\n    if (isNumber(radius)) {\n      this._heatmap.radius(radius, blur);\n    }\n  }\n\n  /**\n   * Update the heatmap's gradient\n   */\n  updateHeatmapGradient(gradient) {\n    if (gradient) {\n      this._heatmap.gradient(gradient);\n    }\n  }\n\n  /**\n   * Update the heatmap's maximum\n   */\n  updateHeatmapMax(maximum) {\n    if (isNumber(maximum)) {\n      this._heatmap.max(maximum);\n    }\n  }\n  redraw() {\n    if (!this._map) {\n      return;\n    }\n    const r = this._heatmap._r;\n    const size = this._map.getSize();\n    const cellSize = r / 2;\n    const panePos = this._map.layerPointToContainerPoint([0, 0]);\n    const offsetX = panePos.x % cellSize;\n    const offsetY = panePos.y % cellSize;\n    const getLat = this.options.latitudeExtractor;\n    const getLng = this.options.longitudeExtractor;\n    const getIntensity = this.options.intensityExtractor;\n    const inBounds = (p, bounds) => bounds.contains(p);\n    const filterUndefined = row => row.filter(c => c !== undefined);\n    const roundResults = results => results.reduce((result, row) => filterUndefined(row).map(cell => [Math.round(cell[0]), Math.round(cell[1]), cell[2]]).concat(result), []);\n    const aggregates = {};\n    const accumulateInGrid = (points, leafletMap, bounds, aggregateType) => points.reduce((grid, point) => {\n      const latLng = [getLat(point), getLng(point)];\n\n      //skip invalid points\n      if (isInvalidLatLngArray(latLng)) {\n        return grid;\n      }\n      const p = leafletMap.latLngToContainerPoint(latLng);\n      if (!inBounds(p, bounds)) {\n        return grid;\n      }\n      const x = Math.floor((p.x - offsetX) / cellSize) + 2;\n      const y = Math.floor((p.y - offsetY) / cellSize) + 2;\n      grid[y] = grid[y] || [];\n      const cell = grid[y][x];\n      const key = `${x}-${y}`;\n      if (!aggregates[key]) {\n        aggregates[key] = {\n          data: {},\n          same: new Set(),\n          seen: 0\n        };\n      }\n      aggregates[key].seen++;\n      const intensity = getIntensity(point);\n      const agg = computeAggregate(aggregates[key], intensity, aggregateType);\n      if (!cell) {\n        grid[y][x] = [p.x, p.y, agg];\n      } else {\n        cell[0] = (cell[0] * cell[2] + p.x * agg) / (cell[2] + agg); // x\n        cell[1] = (cell[1] * cell[2] + p.y * agg) / (cell[2] + agg); // y\n        cell[2] = agg;\n      }\n      return grid;\n    }, []);\n    const getBounds = () => new L.Bounds(L.point([-r, -r]), size.add([r, r]));\n    const getDataForHeatmap = (points, leafletMap, aggregateType) => roundResults(accumulateInGrid(points, leafletMap, getBounds( /*leafletMap*/), aggregateType));\n    const data = getDataForHeatmap(this.options.points, this._map, this.options.aggregateType);\n    const totalMax = max(data.map(m => m[2]));\n    this._heatmap.clear();\n    this._heatmap.data(data);\n    if (this.options.useLocalExtrema) {\n      this.updateHeatmapMax(totalMax);\n    }\n    try {\n      this._heatmap.draw(this.getMinOpacity());\n    } catch (DOMException) {\n      // Safe to ignore - occurs if the width or height is 0\n    }\n    this._frame = null;\n    if (this.options.onStatsUpdate && this.options.points && this.options.points.length > 0) {\n      this.options.onStatsUpdate({\n        min: min(data.map(m => m[2])),\n        max: totalMax\n      });\n    }\n    this._el.style.opacity = this.getOpacity().toString();\n  }\n  reset() {\n    if (!this._map) {\n      return;\n    }\n    const topLeft = this._map.containerPointToLayerPoint([0, 0]);\n    L.DomUtil.setPosition(this._el, topLeft);\n    this.resize();\n    if (this._heatmap && !this._frame /*&& !this._map._animating*/) {\n      this._frame = L.Util.requestAnimFrame(this.redraw, this);\n    }\n    this.redraw();\n  }\n}", "import * as L from 'leaflet';\nimport { createLayerComponent } from '@react-leaflet/core';\nimport Heatmap from './Heatmap';\nfunction HeatmapLayerFactory() {\n  return createLayerComponent(function createHeatmapLayer(props, context) {\n    const instance = new Heatmap(props);\n    return {\n      instance,\n      context\n    };\n  }, function updateHeatmapLayer(instance, _ref) {\n    let {\n      opacity,\n      minOpacity,\n      maxZoom,\n      radius,\n      blur,\n      max,\n      gradient,\n      latitudeExtractor,\n      longitudeExtractor,\n      intensityExtractor,\n      points,\n      aggregateType,\n      useLocalExtrema = true\n    } = _ref;\n    // if (props.fitBoundsOnUpdate) {\n    //   instance.fitBounds()\n    // }\n    instance.updateSimpleHeat({\n      opacity,\n      minOpacity,\n      maxZoom,\n      radius,\n      blur,\n      max,\n      gradient\n    });\n    L.Util.setOptions(instance, {\n      latitudeExtractor,\n      longitudeExtractor,\n      intensityExtractor,\n      points,\n      aggregateType,\n      useLocalExtrema\n    });\n    instance.reset();\n  });\n}\nexport default HeatmapLayerFactory;"],
  "mappings": "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",
  "names": ["max", "point", "SimpleHeat", "point", "latLng", "L", "max"]
}
